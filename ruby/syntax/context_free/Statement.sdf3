module Statement

imports
	CompoundStatement
	Expression
	FunctionName
	Literal
	
context-free syntax

	Stmt.Exp = <<Exp>>

	//Stmt.Call = <<Call> do [| [<BlockVar>] |] <CStmt> end>
	Stmt.Undef = <undef <FNAME>>
	Stmt.Alias = <alias <FNAME> <FNAME>>
	
	Stmt.If = <<Stmt> if <Exp>>
	Stmt.While = <<Stmt> while <Exp>>
	Stmt.Unless = <<Stmt> unless <Exp>>
	Stmt.Until = <<Stmt> until <Exp>>
	
	Stmt.Begin = <BEGIN { <CStmt> }> // Object initializer
	Stmt.End = <END { <CStmt> }> // Object finalizer
	
	//Stmt.Comman = <<LHS> = <Command> [do [| [<BlockVar>] |] <CStmt> end]>
	
	Stmt.Body = <<CStmt> >