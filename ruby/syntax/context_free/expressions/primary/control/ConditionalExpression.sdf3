module ConditionalExpression

imports
  Constructors
  CompoundStatement
  Expression
  MethodArgument
  Separator
  Whitespace

syntax

  CaseExp-CF.CaseExp = "case" LAYOUT?-CF Exp-CF LAYOUT?-CF SepListList?-CF LAYOUT?-CF
                       WhenClause+-CF LAYOUT?-CF ElseClause?-CF LAYOUT?-CF "end"
  CaseExp-CF.Case = "case" LAYOUT?-CF SepListList?-CF LAYOUT?-CF
                    WhenClause+-CF LAYOUT?-CF ElseClause?-CF LAYOUT?-CF "end"

  WhenClause-CF.WhenClause = "when" LAYOUT?-CF WhenArgument-CF LAYOUT?-CF ThenClause-CF

  WhenArgument-CF.WhenArgOp = Exp+-CF SplattingArgumentOptional?-CF

  ThenClause-CF.ImplicitThen = SEPARATOR-LEX LAYOUT?-CF CStmt-CF
  ThenClause-CF.ExplicitThen = SepListList?-CF LAYOUT?-CF "then" LAYOUT?-CF CStmt-CF

  ConditionalOperatorExpression-CF.ConditionalExp = RangeConstructor-CF LAYOUT-NO-NEWLINE*-LEX "?" LAYOUT?-CF
                                                      Exp-CF LAYOUT-NO-NEWLINE*-LEX ":" LAYOUT?-CF Exp-CF

context-free syntax

  ConditionalExpression = IfExp
  ConditionalExpression = UnlessExp
  ConditionalExpression = CaseExp
  ConditionalExpression = ConditionalOperatorExpression

  IfExp.If =
   <if <Exp>
    <ThenClause>
    <ElseIfClause*>
    <ElseClause?>
    end>

  ElseIfClause.ElseIf = <elseif <Exp> <ThenClause>>

  ElseClause.Else = <else <CStmt>>

  UnlessExp.Unless =
    <unless <Exp>
      <ThenClause>
      <ElseClause?>
     end
     >

  WhenArgument.WhenSplat = SplattingArgument

  ConditionalOperatorExpression = RangeConstructor  {avoid}
