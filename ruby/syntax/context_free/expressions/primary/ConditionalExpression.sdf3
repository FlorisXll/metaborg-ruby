module ConditionalExpression

imports
  CompoundStatement
  Expression
  MethodArgument
  OperatorExpression
  Separator
  
context-free syntax

  IfExp.If = 
   <if <Exp> 
    <ThenClause> 
    <ElseIfClause*> 
    <ElseClause?> 
    end>
    
  ThenClause.ImplicitThen = <<Sep> <CStmt>>
  ThenClause.ExplicitThen = <<Sep?> then <CStmt>>     {prefer}
  
  ElseIfClause.ElseIf = <elseif <Exp> <ThenClause>>
  
  ElseClause.Else = <else <CStmt>>
  
  UnlessExp.Unless = 
    <unless <Exp> 
      <ThenClause> 
      <ElseClause?> 
     end
     > 
     
  CaseExp.CaseExp = 
    <case <Exp> <Sep*>
     <WhenClause+>
     <ElseClause?>
     end
     > 
  CaseExp.Case =
    <case <Sep*>
     <WhenClause+>
     <ElseClause?>
     end
     >
  
  WhenClause.When = <when <WhenArgument> <ThenClause>>
  WhenArgument.WhenArgOp = <<OpExp+> <SplattingArgumentOptional?>>
  WhenArgument.WhenSplat = SplattingArgument
  
  //TODO conditional-operator-expression
  
  
  