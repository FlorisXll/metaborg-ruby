module LogicalExpression

imports
  UnaryOperatorExpression
  BinaryOperatorExpression
  Expression
  Method
  OperatorExpression

context-free syntax

  KeywordExp.KeyNot = KeywordNOTExpression
  KeywordExp.KeyOr = KeywordORExpression
  KeywordExp.KeyAnd = KeywordANDExpression
  
  // Logical Not
  LogicalNOTExpression.Keyword = KeywordNOTExpression
  LogicalNOTExpression.Operator = OperatorNOTExpression
  KeywordNOTExpression.Method = <<MethodInvocationWithoutParentheses>>          
  KeywordNOTExpression.NotMethod = <!<MethodInvocationWithoutParentheses>>      {right}
  KeywordNOTExpression.OpExp = <<OpExp>>                                        {prefer}
  KeywordNOTExpression.Not = <not <KeywordNOTExpression>>                       {right}
  OperatorNOTExpression.MethodInvoc = <!<MethodInvocationWithoutParentheses>>   {right}
  OperatorNOTExpression.BoolNotUnOp = <!<UnaryExpression>>                      {right}
  
  // Logical OR
  LogicalORExpression.Keyword = KeywordORExpression
  LogicalORExpression.Operator = OperatorORExpression
  KeywordORExpression.Or = <<Exp> or <KeywordORExpression>>                     {left}
  OperatorORExpression.OpORAndExp = OperatorANDExpression
  OperatorORExpression.BoolOr = <<OperatorORExpression> || <OperatorANDExpression>>
  
  // Logical AND
  LogicalANDExpression.Keyword = KeywordANDExpression
  LogicalANDExpression.Operator = OperatorANDExpression
  KeywordANDExpression.And = <<Exp> and <KeywordNOTExpression>>                 {left}
  OperatorANDExpression.EqExp = EqualityExpression
  OperatorANDExpression.BoolAnd = <<OperatorANDExpression> && <EqualityExpression>>
  