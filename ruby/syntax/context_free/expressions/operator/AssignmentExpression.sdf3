module AssignmentExpression

imports
  Identifier
  Method
  MethodArgument
  OperatorExpression
  Primary
  Variable
  Whitespace
  

context-free syntax
  AssignmentExp = SingleAssignmentExp
  
  SingleAssignmentExp = SingleVarAssignmentExp
  SingleAssignmentExp = ScopedConstantAssignmentExp
  SingleAssignmentExp = SingleIndexingAssignmentExp
  SingleAssignmentExp = SingleMethodAssignmentExp
  
  SingleVarAssignmentExp.SingleVarAssign = <<Var> = <OpExp>>
  
  ScopedConstantAssignmentExp.PrimaryExp = 
    <<Primary> :: <CONSTANT-IDENTIFIER> = <OpExp>>
  ScopedConstantAssignmentExp.NoPrimaryExp = 
    <:: <CONSTANT-IDENTIFIER> = <OpExp>> 
    
syntax

  SingleIndexingAssignmentExp-CF.Test = "jaapie"
  SingleIndexingAssignmentExp-CF.SinglePrimaryIndex = Primary-CF 
    "[" IndexingArgumentListOptional?-CF "]" LAYOUT-NO-NEWLINE*-LEX "=" LAYOUT?-CF OpExp-CF

  IndexingArgumentListOptional-CF = LAYOUT?-CF IndexingArgumentList-CF LAYOUT?-CF
  
  SingleMethodAssignmentExp-CF.SMethodAssignExp = Primary-CF LAYOUT-NO-NEWLINE*-LEX MethodInvoc-CF
    LAYOUT?-CF LOCAL-V-IDENTIFIER-CF LAYOUT-NO-NEWLINE*-LEX "=" LAYOUT?-CF OpExp-CF
  SingleMethodAssignmentExp-CF.SMethodAssignExpConstant = Primary-CF LAYOUT-NO-NEWLINE*-LEX "."
    LAYOUT?-CF CONSTANT-IDENTIFIER-CF LAYOUT-NO-NEWLINE*-LEX "=" LAYOUT?-CF OpExp-CF
  
  MethodInvoc-CF.Colons = "::"
  MethodInvoc-CF.Dot = "."
  
context-free syntax
  
  AssignmentExp.Abbreviated = "@#$@#" // TODO
  