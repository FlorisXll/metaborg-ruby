module MethodArgument

imports
  Command
  HashConstructor
  Method
  Expression

context-free syntax

  MethodArgument.MethodArgWithoutPar = ArgumentWithoutParentheses
//  MethodArgument.MethodArgWithPar =
  MethodArgument.IndexArgList = IndexingArgumentList
  
  IndexingArgumentList = Command
  IndexingArgumentList.OpExpList = ExpressionList OptionalComma?
  IndexingArgumentList.SplatOpExpList = ExpressionList "," SplattingArgument
  IndexingArgumentList.IndexAssocList = AssociationList OptionalComma?
  IndexingArgumentList.SplatOpExp = SplattingArgument
  OptionalComma.Comma = ","
  
  ArgumentWithParentheses.Pars = "("")"
  ArgumentWithParentheses.ArgList = <( <ArgumentList> )>
  ArgumentWithParentheses.ExpList = <( <Exp>, <ChainedCommandWithDoBlock> )>
  ArgumentWithParentheses.ArgsParChained =
    <( <ChainedCommandWithDoBlock> )>
  
  // Lookahead not in { '{' } 
  ArgumentWithoutParentheses.ArgWithoutPar = ArgumentList
  
  SplattingArgument.SplatArg = <* <Exp>>
  SplattingArgumentOptional.SplatArgOptional = <, <SplattingArgument>>
  
  ExpressionList.ExpList = {Exp ","}+  
  
  // TODO 
  ArgumentList.Block =  <<BlockArgument>>
  ArgumentList.Splatting = <<SplattingArgument> <BlockArgumentOptional?>>
  ArgumentList.OpList = <<ExpressionList>, <AssociationList> <SplattingArgumentOptional?> <BlockArgumentOptional?>>
  ArgumentList.OpWithoutAssoc = <<ExpressionList> <SplattingArgumentOptional?> <BlockArgumentOptional?>>
  ArgumentList.OpWithAssoc = <<AssociationListNonEmpty> <SplattingArgumentOptional?> <BlockArgumentOptional?>>
  ArgumentList.Command = <<Command>>
  
  BlockArgument.BlockArg = <& <Exp>>
  BlockArgumentOptional.BlockArgOptional = <, <BlockArgument>>