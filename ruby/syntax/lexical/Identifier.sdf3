module Identifier

sorts

  ID

lexical syntax

  ID = [a-zA-Z\_] [a-zA-Z0-9\_]*

lexical restrictions

  ID -/- [a-zA-Z0-9\_]
  
lexical syntax 

  // Reserved keywords
  // Sources:
  // http://ruby-doc.org/core-2.5.0/doc/keywords_rdoc.html
  // https://www.ipa.go.jp/files/000011432.pdf (chapter 8.7.2)
  // http://www.java2s.com/Code/Ruby/Language-Basics/Rubysreservedwords.htm
  ID = "__LINE__" 		{reject}
  ID = "__ENCODING__" 	{reject}
  ID = "__FILE__" 		{reject}
  ID = "BEGIN" 			{reject}
  ID = "END" 			{reject}
  ID = "alias" 			{reject}
  ID = "and" 			{reject}
  ID = "begin" 			{reject}
  ID = "break" 			{reject}
  ID = "case" 			{reject}
  ID = "class" 			{reject}
  ID = "def" 			{reject}
  ID = "defined?" 		{reject}
  ID = "do" 			{reject}
  ID = "else" 			{reject}
  ID = "elseif" 		{reject}
  ID = "end" 			{reject}
  ID = "ensure" 		{reject}
  ID = "for" 			{reject}
  ID = "false" 			{reject}
  ID = "if" 			{reject}
  ID = "in" 			{reject}
  ID = "module" 		{reject}
  ID = "next" 			{reject}
  ID = "nil" 			{reject}
  ID = "not" 			{reject}
  ID = "or" 			{reject}
  ID = "redo" 			{reject}
  ID = "rescue" 		{reject}
  ID = "retry" 			{reject}
  ID = "return" 		{reject}
  ID = "self" 			{reject}
  ID = "super" 			{reject}
  ID = "then" 			{reject}
  ID = "true" 			{reject}
  ID = "undef" 			{reject}
  ID = "unless" 		{reject}
  ID = "until" 			{reject}
  ID = "when" 			{reject}
  ID = "while" 			{reject}
  ID = "yield" 			{reject} 